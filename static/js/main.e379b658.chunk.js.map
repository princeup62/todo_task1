{"version":3,"sources":["components/Mod.js","components/EditMod.js","assests/images/Hourglass.gif","App.js","reportWebVitals.js","index.js"],"names":["Mod","show","handleClose","setListProps","ListProps","useState","todo","dueDate","Date","toJSON","slice","replace","importance","isDone","NewTodoPost","setNewTodoPost","handleChange","event","name","target","value","handlePost","trim","fetch","method","headers","body","JSON","stringify","then","result","json","response","toast","className","alert","Modal","onHide","Header","closeButton","Title","Body","for","type","class","placeholder","onChange","Footer","Button","variant","onClick","onKeyDown","key","EditMod","handleCloseEditMod","showEditMod","handleShowEditMod","updateList","setUpdateList","setIsLoading","isLoading","FormGroup","FormControlLabel","control","Switch","checked","label","console","log","id","tempobject","resp","window","location","reload","App","setShow","List","setList","setShowEditMod","pid","useEffect","handleShow","Fab","size","color","aria-label","autoClose","src","Spinner","alt","map","el","role","eventID","tempArray","filter","item","icon","faTrash","faPen","style","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e379b658.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nfunction Mod({ show, handleClose, setListProps, ListProps }) {\r\n  const [NewTodoPost, setNewTodoPost] = useState({\r\n    todo: \"\",\r\n    dueDate: new Date().toJSON().slice(0, 10).replace(/-/g, \"/\"),\r\n    importance: \"Medium\",\r\n    isDone: false,\r\n  });\r\n\r\n  const handleChange = (event) => {\r\n    const name = event.target.name;\r\n    const value = event.target.value;\r\n    setNewTodoPost({ ...NewTodoPost, [name]: value });\r\n  };\r\n\r\n  const handlePost = () => {\r\n    handleClose();\r\n\r\n    if (NewTodoPost.todo.trim() !== \"\") {\r\n      fetch(\"https://60b5a271fe923b0017c84482.mockapi.io/todo\", {\r\n        method: \"POST\",\r\n\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(NewTodoPost),\r\n      }).then((result) =>\r\n        result.json().then((response) => {\r\n          // setListProps(...ListProps, response);\r\n          setListProps([...ListProps, response]);\r\n          setNewTodoPost({ ...NewTodoPost, todo: \"\" });\r\n\r\n          toast(\"New todo sucessfully added...\", { className: \"green\" });\r\n        })\r\n      );\r\n    } else {\r\n      alert(\"cant save on blank....\");\r\n    }\r\n  };\r\n\r\n  function handleKeyDown(event) {\r\n    if (event.key === \"Enter\") {\r\n      handlePost();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Add Todo List</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"form-group\">\r\n            <label for=\"exampleFormControlInput1\">Todo</label>\r\n            <input\r\n              type=\"text\"\r\n              class=\"form-control\"\r\n              placeholder=\"enter todo task...\"\r\n              name=\"todo\"\r\n              onChange={handleChange}\r\n              value={NewTodoPost.todo}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-group\">\r\n            <label for=\"exampleFormControlInput1\">Priority Level</label>\r\n            <select\r\n              className=\"form-control\"\r\n              name=\"importance\"\r\n              onChange={handleChange}\r\n              value={NewTodoPost.importance}\r\n            >\r\n              <option>High</option>\r\n              <option>Medium</option>\r\n              <option>Low</option>\r\n            </select>\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={handlePost}\r\n            onKeyDown={handleKeyDown}\r\n          >\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Mod;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nfunction EditMod({\r\n  handleCloseEditMod,\r\n  handleShowEditMod,\r\n  showEditMod,\r\n  updateList,\r\n  setUpdateList,\r\n  setIsLoading,\r\n  isLoading,\r\n}) {\r\n  const handleChange = (event) => {\r\n    let name = event.target.name;\r\n    let value = event.target.value;\r\n    setUpdateList({ ...updateList, [name]: value });\r\n  };\r\n\r\n  const toggleChecked = () => {\r\n    setUpdateList({ ...updateList, isDone: !updateList.isDone });\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    handleCloseEditMod();\r\n    console.log(updateList.id);\r\n    let tempobject = {\r\n      todo: updateList.todo,\r\n      dueDate: updateList.dueDate,\r\n      importance: updateList.importance,\r\n      isDone: updateList.isDone,\r\n    };\r\n\r\n    if (updateList.todo.trim() !== \"\") {\r\n      fetch(\r\n        `https://60b5a271fe923b0017c84482.mockapi.io/todo/${updateList.id}`,\r\n        {\r\n          method: \"PUT\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify(tempobject),\r\n        }\r\n      ).then((result) => {\r\n        result.json().then((resp) => {\r\n          console.log(resp);\r\n          toast(\"Todo Updated..\", { className: \"blue\" });\r\n          window.location.reload();\r\n        });\r\n      });\r\n    } else {\r\n      alert(\"You are inserting blank todo!\");\r\n    }\r\n\r\n    console.log(tempobject);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal show={showEditMod} onHide={handleCloseEditMod}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Update Todo</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div className=\"form-group\">\r\n            <label for=\"exampleInputEmail1\">Todo:</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"\"\r\n              value={updateList.todo}\r\n              name=\"todo\"\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"exampleFormControlSelect1\">Priority Level:</label>\r\n            <select\r\n              class=\"form-control\"\r\n              value={updateList.importance}\r\n              name=\"importance\"\r\n              onChange={handleChange}\r\n            >\r\n              <option>High</option>\r\n              <option>Medium</option>\r\n              <option>Low</option>\r\n            </select>\r\n\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={updateList.isDone}\r\n                    onChange={toggleChecked}\r\n                  />\r\n                }\r\n                label={updateList.isDone ? \"Done\" : \"Not Done\"}\r\n              />\r\n            </FormGroup>\r\n          </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleCloseEditMod}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleSubmit}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EditMod;\r\n","export default __webpack_public_path__ + \"static/media/Hourglass.9339400d.gif\";","import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Fab from \"@material-ui/core/Fab\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPen, faTrash, faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport Mod from \"./components/Mod\";\nimport EditMod from \"./components/EditMod\";\nimport Spinner from \"../src/assests/images/Hourglass.gif\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"../src/index.css\";\n\nconst App = () => {\n  const [show, setShow] = useState(false);\n  const [showEdit, setShowEdit] = useState(false);\n  const [List, setList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [updateList, setUpdateList] = useState({\n    todo: \"\",\n    dueDate: \"\",\n    importance: \"\",\n    isDone: false,\n  });\n\n  const [showEditMod, setShowEditMod] = useState(false);\n  const handleCloseEditMod = () => setShowEditMod(false);\n  const handleShowEditMod = (pid) => {\n    setShowEditMod(true);\n\n    fetch(`https://60b5a271fe923b0017c84482.mockapi.io/todo/${pid}`).then(\n      (response) =>\n        response.json().then((result) => {\n          setUpdateList({\n            id: pid,\n            todo: result.todo,\n            dueDate: result.dueDate,\n            importance: result.importance,\n            isDone: result.isDone,\n          });\n        })\n    );\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetch(\"https://60b5a271fe923b0017c84482.mockapi.io/todo\").then((response) =>\n      response.json().then((result) => {\n        setList(result);\n        setIsLoading(false);\n      })\n    );\n  }, []);\n\n  const handleDelete = (eventID) => {\n    fetch(`https://60b5a271fe923b0017c84482.mockapi.io/todo/${eventID}`, {\n      method: \"DELETE\",\n    }).then(() => {\n      let tempArray = List.filter((item) => item.id !== eventID);\n      setList([...tempArray]);\n\n      toast(\"Data deleted..\", { className: \"red\" });\n      // alert(\"deleted\");\n    });\n  };\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        {/* ---------------------title-start----------------------------- */}\n        <div className=\"title shadow-sm\">\n          <div className=\"col-md-12 d-flex justify-content-between align-items-center py-4\">\n            <h1>TODO</h1>\n            <Fab\n              size=\"small\"\n              color=\"primary\"\n              aria-label=\"add\"\n              onClick={handleShow}\n            >\n              <AddIcon />\n            </Fab>\n          </div>\n        </div>\n        {/* ------------------------title-end--------------------------- */}\n\n        <Mod\n          show={show}\n          handleClose={handleClose}\n          handleShow={handleShow}\n          setListProps={setList}\n          ListProps={List}\n        />\n        <ToastContainer autoClose={1000} />\n\n        <EditMod\n          handleCloseEditMod={handleCloseEditMod}\n          handleShowEditMod={handleShowEditMod}\n          showEditMod={showEditMod}\n          updateList={updateList}\n          setUpdateList={setUpdateList}\n        />\n\n        {/* -------------------------body-start----------------------------------*/}\n        <div className=\"col-md-12 all-todo-wrapper text-lg-center d-lg-flex justify-lg-content-center flex-lg-wrap \">\n          {isLoading ? (\n            <div className=\"my-5 mx-auto text-center\">\n              <img src={Spinner} alt=\"\" />\n            </div>\n          ) : (\n            List.map((el) => (\n              <div className=\"card shadow-md  my-5 col-md-3 mx-lg-5\">\n                <div className=\"card-body  \">\n                  <div className=\"d-flex  justify-content-between align-items-center\">\n                    <h4>{el.todo}</h4>\n                    <h6 className=\"text-primary\">{el.importance}</h6>\n                  </div>\n                  <p className=\"text-muted\">Due: {el.dueDate}</p>\n\n                  <div\n                    className=\" btn-group\"\n                    role=\"group\"\n                    aria-label=\"Basic example\"\n                  >\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-light \"\n                      onClick={() => handleDelete(el.id)}\n                    >\n                      <FontAwesomeIcon icon={faTrash} color=\"blue\" />\n                    </button>\n                    <button type=\"button\" className=\"btn btn-light\">\n                      <FontAwesomeIcon\n                        icon={faPen}\n                        color=\"blue\"\n                        onClick={() => handleShowEditMod(el.id)}\n                      />\n                    </button>\n                    <span\n                      style={{ color: el.isDone ? \"green\" : \"red\" }}\n                      className=\"mx-5\"\n                    >\n                      {el.isDone ? \"Done\" : \"Not Done\"}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n\n        {/* -------------------------body-end-------------------------------------- */}\n\n        {/* ----------------------------toasters------------------------------------ */}\n\n        {/* ------------------------end-toasters------------------------------------- */}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}